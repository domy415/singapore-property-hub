generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  description     String    @db.Text
  type            PropertyType
  status          PropertyStatus @default(AVAILABLE)
  price           Float
  bedrooms        Int?
  bathrooms       Int?
  floorArea       Float?
  address         String
  district        String
  postalCode      String?
  
  images          PropertyImage[]
  features        String[]
  
  agentId         String?
  agent           Agent?    @relation(fields: [agentId], references: [id])
  
  views           Int       @default(0)
  featured        Boolean   @default(false)
  
  // External listing fields
  externalId      String?   @unique
  source          String?   // PropertyGuru, 99.co, etc
  listingUrl      String?
  imageUrl        String?
  area            Int?      // in sqft
  propertyType    String?
  tenure          String?
  psf             String?
  availableFrom   DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  leads           Lead[]
  
  @@index([slug])
  @@index([type, status])
  @@index([district])
  @@index([externalId])
  @@index([source])
}

model PropertyImage {
  id          String    @id @default(cuid())
  url         String
  alt         String
  isPrimary   Boolean   @default(false)
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@index([propertyId])
}

model Article {
  id              String    @id @default(cuid())
  title           String
  slug            String    @unique
  excerpt         String
  content         String    @db.Text
  category        ArticleCategory
  tags            String[]
  
  featuredImage   String?
  
  authorId        String
  author          Author    @relation(fields: [authorId], references: [id])
  
  publishedAt     DateTime?
  status          ArticleStatus @default(DRAFT)
  
  seoTitle        String?
  seoDescription  String?
  seoKeywords     String[]
  
  views           Int       @default(0)
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  linkedinPostId   String?
  linkedinUrl      String?
  linkedInPosted   Boolean   @default(false)
  linkedInPostDate DateTime?
  
  @@index([slug])
  @@index([category, status])
  @@index([publishedAt])
}

model Lead {
  id              String    @id @default(cuid())
  name            String
  email           String
  phone           String?
  message         String?   @db.Text
  
  propertyId      String?
  property        Property? @relation(fields: [propertyId], references: [id])
  
  source          LeadSource
  status          LeadStatus @default(NEW)
  
  responseDate    DateTime?
  notes           String?   @db.Text
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([email])
  @@index([status])
  @@index([createdAt])
}

model Agent {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  phone           String
  license         String
  bio             String?   @db.Text
  photo           String?
  
  properties      Property[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Author {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  bio             String?   @db.Text
  photo           String?
  
  articles        Article[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum PropertyType {
  CONDO
  LANDED
  HDB
  SHOPHOUSE
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  UPCOMING
}

enum ArticleCategory {
  MARKET_INSIGHTS
  BUYING_GUIDE
  SELLING_GUIDE
  INVESTMENT
  NEIGHBORHOOD
  PROPERTY_NEWS
  NEW_LAUNCH_REVIEW
  LOCATION_GUIDE
}

enum ArticleStatus {
  DRAFT
  REVIEW
  PUBLISHED
  ARCHIVED
}

enum LeadSource {
  WEBSITE
  ARTICLE
  PROPERTY_INQUIRY
  CONTACT_FORM
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum ScoreType {
  DQI
  USQI
}

enum DeveloperTier {
  TIER_1
  ESTABLISHED
  MID_TIER
  NEW
  UNKNOWN
}

enum GreenMarkLevel {
  PLATINUM
  GOLDPLUS
  GOLD
  CERTIFIED
  NONE
}

model ScoringResult {
  id                  String    @id @default(cuid())
  developmentName     String
  scoreType           ScoreType
  totalScore          Int
  locationScore       Int
  propertyScore       Int
  investmentScore     Int
  qualityScore        Int
  facilitiesScore     Int
  sustainabilityScore Int
  marketScore         Int
  
  // USQI-specific fields
  floorLevel          Int?
  unitNumber          String?
  unitType            String?
  viewType            String?
  
  detailsJson         Json
  
  createdAt           DateTime  @default(now())
  userId              String?
  
  @@index([developmentName])
  @@index([userId])
  @@index([createdAt])
}

model DevelopmentDataCache {
  developmentId     String          @id @default(cuid())
  developmentName   String          @unique
  district          Int
  avgPsf            Decimal?        @db.Decimal(10, 2)
  rentalYield       Decimal?        @db.Decimal(4, 2)
  transactionVolume Int?
  conquasScore      Int?
  developerName     String?
  developerTier     DeveloperTier?
  greenMarkLevel    GreenMarkLevel?
  totalUnits        Int?
  completionYear    Int?
  tenure            String?
  facilitiesCount   Int?
  lastUpdated       DateTime        @default(now())
  
  @@index([district])
}

model DistrictAverage {
  id             String    @id @default(cuid())
  district       Int       @unique
  avgPsf         Decimal   @db.Decimal(10, 2)
  avgRentalYield Decimal   @db.Decimal(4, 2)
  avgDqiScore    Decimal?  @db.Decimal(4, 2)
  lastUpdated    DateTime  @default(now())
}

model EmailSubscription {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  sequenceId       String
  sequenceStarted  DateTime
  currentStep      Int       @default(0)
  isActive         Boolean   @default(true)
  sentEmails       String[]  @default([])
  unsubscribedAt   DateTime?
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([email])
  @@index([sequenceId])
  @@index([isActive])
}

model EmailLog {
  id               String    @id @default(cuid())
  email            String
  type             String    // welcome, autoresponder, lead_notification, etc.
  templateId       String
  subject          String?
  status           EmailStatus @default(SENT)
  errorMessage     String?
  
  sentAt           DateTime
  openedAt         DateTime?
  clickedAt        DateTime?
  
  metadata         Json?     // Store additional email data
  
  @@index([email])
  @@index([type])
  @@index([sentAt])
  @@index([status])
}

model EmailTemplate {
  id               String    @id @default(cuid())
  name             String    @unique
  subject          String
  htmlContent      String    @db.Text
  textContent      String    @db.Text
  variables        Json?     // Store template variables
  category         String?   // welcome, autoresponder, notification
  
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  @@index([category])
  @@index([isActive])
}

enum EmailStatus {
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
}